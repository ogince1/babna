import { useState, useEffect } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase, supabaseHelpers } from '../lib/supabase';
import { Database } from '../lib/supabase';

type UserProfile = Database['public']['Tables']['users']['Row'];

export const useSupabaseAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Get initial session
    const initializeAuth = async () => {
      try {
        // Avec persistSession: false, il ne devrait pas y avoir de session au d√©marrage
        console.log('üîÑ Initialisation sans session persistante...');
        
        setSession(null);
        setUser(null);
        setProfile(null);
        setLoading(false);
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation de l\'auth:', error);
        setSession(null);
        setUser(null);
        setProfile(null);
        setLoading(false);
      }
    };

    initializeAuth();

    // Listen for auth changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('üîÑ Auth state change:', event, session?.user?.email);
      
      // √âviter les mises √† jour d'√©tat inutiles
      if (event === 'SIGNED_OUT') {
        console.log('üîÑ D√©connexion d√©tect√©e, nettoyage de l\'√©tat...');
        setSession(null);
        setUser(null);
        setProfile(null);
        setLoading(false);
        return;
      }
      
      if (event === 'SIGNED_IN') {
        console.log('üîÑ Connexion d√©tect√©e, mise √† jour de l\'√©tat...');
        setSession(session);
        setUser(session?.user ?? null);
        
        if (session?.user) {
          try {
            await loadUserProfile(session.user.id);
          } catch (error) {
            console.error('‚ùå Erreur lors du chargement du profil apr√®s connexion:', error);
            setProfile(null);
          }
        }
        
        setLoading(false);
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  const loadUserProfile = async (userId: string) => {
    try {
      console.log('üîÑ Chargement du profil utilisateur:', userId);
      
          // Utiliser directement l'utilisateur d√©j√† connect√© au lieu de refaire la v√©rification
    console.log('üîÑ V√©rification de l\'utilisateur connect√©...');
    
    if (!user) {
      console.log('‚ö†Ô∏è Aucun utilisateur connect√© dans l\'√©tat, tentative de r√©cup√©ration...');
      
      // Essayer de r√©cup√©rer l'utilisateur depuis Supabase Auth
      try {
        const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser();
        
        if (userError || !currentUser) {
          console.log('‚ùå Impossible de r√©cup√©rer l\'utilisateur depuis Supabase Auth');
          setProfile(null);
          return;
        }
        
        console.log('‚úÖ Utilisateur r√©cup√©r√© depuis Supabase Auth:', currentUser.email);
        console.log('‚úÖ ID utilisateur r√©cup√©r√©:', currentUser.id);
        
        // Mettre √† jour l'ID pour utiliser celui de l'utilisateur r√©cup√©r√©
        if (currentUser.id !== userId) {
          console.log('‚ö†Ô∏è ID utilisateur diff√©rent d√©tect√©:');
          console.log('  - ID demand√©:', userId);
          console.log('  - ID r√©cup√©r√©:', currentUser.id);
          console.log('üîÑ Utilisation de l\'ID de l\'utilisateur r√©cup√©r√©');
          userId = currentUser.id;
        }
        
        console.log('‚úÖ Utilisateur confirm√©:', currentUser.email);
        console.log('‚úÖ ID utilisateur confirm√©:', userId);
      } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
        setProfile(null);
        return;
      }
    } else {
      // V√©rifier si l'ID correspond, sinon utiliser l'ID de l'utilisateur connect√©
      if (user.id !== userId) {
        console.log('‚ö†Ô∏è ID utilisateur diff√©rent d√©tect√©:');
        console.log('  - ID demand√©:', userId);
        console.log('  - ID connect√©:', user.id);
        console.log('üîÑ Utilisation de l\'ID de l\'utilisateur connect√©');
        // Mettre √† jour l'ID pour utiliser celui de l'utilisateur connect√©
        userId = user.id;
      }
      
      console.log('‚úÖ Utilisateur connect√© confirm√©:', user.email);
      console.log('‚úÖ ID utilisateur confirm√©:', userId);
    }
      console.log('üîÑ Tentative de r√©cup√©ration du profil depuis public.users...');
      
      // Essayer de r√©cup√©rer le profil directement depuis Supabase
      const { data: profileData, error: profileError } = await supabase
        .from('users')
        .select('id, name, email, role, phone, avatar_url, whatsapp, created_at, updated_at')
        .eq('id', userId)
        .single();
      
      console.log('üîÑ R√©sultat de la requ√™te profil:', { profileData, profileError });
      
      if (profileError) {
        console.log('‚ö†Ô∏è Erreur lors de la r√©cup√©ration du profil:', profileError);
        throw profileError;
      }
      
      if (profileData && profileData.name && profileData.name !== 'Utilisateur') {
        console.log('‚úÖ Profil utilisateur charg√© depuis public.users:', profileData.name);
        console.log('üîÑ Mise √† jour du state avec le profil:', profileData);
        setProfile(profileData);
        console.log('‚úÖ State profil mis √† jour avec succ√®s');
        return;
      }
      
      // Profil incomplet ou fant√¥me d√©tect√©
      if (profileData && (profileData.name === 'Utilisateur' || !profileData.name)) {
        console.log('‚ö†Ô∏è Profil fant√¥me d√©tect√©, suppression et recr√©ation...');
        
        try {
          // Supprimer le profil fant√¥me
          const { error: deleteError } = await supabase
            .from('users')
            .delete()
            .eq('id', userId);
          
          if (deleteError) {
            console.error('‚ùå Erreur lors de la suppression du profil fant√¥me:', deleteError);
          } else {
            console.log('‚úÖ Profil fant√¥me supprim√©');
          }
          
          // Lancer la cr√©ation d'un nouveau profil
          throw new Error('Profil fant√¥me supprim√©, cr√©ation d\'un nouveau profil');
          
        } catch (deleteError) {
          console.log('üîÑ Suppression du profil fant√¥me termin√©e');
          throw new Error('Profil fant√¥me supprim√©, cr√©ation d\'un nouveau profil');
        }
      }
      
      console.log('‚ö†Ô∏è Aucun profil trouv√© dans public.users');
      throw new Error('Profil non trouv√©');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement du profil:', error);
      
      // Si l'utilisateur est connect√© mais le profil n'existe pas, le cr√©er
      if (user) {
        console.log('‚ö†Ô∏è Utilisateur connect√© mais profil non trouv√©, cr√©ation du profil...');
        try {
          console.log('üîÑ Cr√©ation automatique du profil utilisateur...');
          
          // Cr√©er le profil automatiquement
          const { error: createError } = await supabase
            .from('users')
            .insert({
              id: userId,
              email: user.email || '',
              name: user.user_metadata?.name || user.email?.split('@')[0] || 'Utilisateur',
              phone: user.user_metadata?.phone || null,
              whatsapp: user.user_metadata?.whatsapp || null,
              role: user.user_metadata?.role || 'client'
            });
          
          if (createError) {
            console.error('‚ùå Erreur lors de la cr√©ation du profil:', createError);
            throw createError;
          }
          
          console.log('‚úÖ Profil utilisateur cr√©√© automatiquement');
          
          // Recharger le profil cr√©√©
          const { data: newProfileData, error: newProfileError } = await supabase
            .from('users')
            .select('id, name, email, role, phone, avatar_url, whatsapp, created_at, updated_at')
            .eq('id', userId)
            .single();
          
          if (newProfileError) {
            console.error('‚ùå Erreur lors du rechargement du profil cr√©√©:', newProfileError);
            setProfile(null);
            return;
          }
          
          console.log('‚úÖ Nouveau profil charg√© avec succ√®s:', newProfileData.name);
          console.log('üîÑ Mise √† jour du state avec le nouveau profil:', newProfileData);
          setProfile(newProfileData);
          console.log('‚úÖ State profil mis √† jour avec succ√®s');
          
        } catch (createError) {
          console.error('‚ùå Erreur lors de la cr√©ation du profil:', createError);
          setProfile(null);
        }
      } else {
        console.log('‚ö†Ô∏è Aucun utilisateur connect√©, profil mis √† null');
        setProfile(null);
      }
    }
  };

  const signUp = async (email: string, password: string, userData: Partial<UserProfile>) => {
    try {
      console.log('üîÑ Tentative d\'inscription:', email);
      setLoading(true);
      
      // √âtape 1: Cr√©er l'utilisateur dans auth.users
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            name: userData.name || '',
            phone: userData.phone || null,
            whatsapp: userData.whatsapp || null,
            role: userData.role || 'client'
          }
        }
      });

      if (error) throw error;

      // √âtape 2: Cr√©er le profil dans public.users avec d√©lai et v√©rification
      if (data.user) {
        console.log('üîÑ Attente de la propagation de l\'utilisateur dans auth.users...');
        
        // Attendre que l'utilisateur soit compl√®tement propag√©
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        try {
          // V√©rifier que l'utilisateur existe dans auth.users
          const { data: authUser, error: authError } = await supabase.auth.getUser();
          
          if (authError || !authUser.user) {
            console.log('‚ö†Ô∏è Utilisateur pas encore disponible, attente suppl√©mentaire...');
            await new Promise(resolve => setTimeout(resolve, 3000));
          }
          
          console.log('üîÑ Cr√©ation du profil utilisateur...');
          
          const { error: profileError } = await supabase
            .from('users')
            .insert({
              id: data.user.id,
              email: data.user.email!,
              name: userData.name || '',
              phone: userData.phone || null,
              whatsapp: userData.whatsapp || null,
              role: userData.role || 'client',
            });

          if (profileError) {
            console.error('‚ùå Erreur lors de la cr√©ation du profil:', profileError);
            throw profileError;
          }

          console.log('‚úÖ Profil utilisateur cr√©√© avec succ√®s dans public.users');
        } catch (profileError) {
          console.error('‚ùå Erreur lors de la cr√©ation du profil:', profileError);
          // Si √ßa √©choue, on continue quand m√™me
          console.log('‚ö†Ô∏è Le profil sera cr√©√© lors de la premi√®re connexion');
        }
      }

      console.log('‚úÖ Inscription compl√®te r√©ussie:', data.user?.email);
      setLoading(false); // D√©sactiver le loading en cas de succ√®s
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Erreur d\'inscription:', error);
      setLoading(false);
      return { data: null, error };
    }
  };

  const signIn = async (email: string, password: string) => {
    try {
      console.log('üîÑ Tentative de connexion:', email);
      setLoading(true);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;

      console.log('‚úÖ Connexion r√©ussie:', data.user?.email);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Erreur de connexion:', error);
      setLoading(false);
      return { data: null, error };
    }
  };

  const signOut = async () => {
    try {
      console.log('üîÑ D√©but de la d√©connexion...');
      
      // Forcer la mise √† jour de l'√©tat local imm√©diatement
      setUser(null);
      setProfile(null);
      setSession(null);
      setLoading(false);
      
      // D√©connexion simple sans persistance
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('‚úÖ D√©connexion r√©ussie');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
      return { error };
    }
  };

  const updateProfile = async (updates: Partial<UserProfile>) => {
    if (!user) throw new Error('No user logged in');

    try {
      const { data, error } = await supabase
        .from('users')
        .update(updates)
        .eq('id', user.id)
        .select()
        .single();

      if (error) throw error;

      setProfile(data);
      return { data, error: null };
    } catch (error) {
      return { data: null, error };
    }
  };

  const forceSignOut = async () => {
    try {
      console.log('üîÑ D√©connexion forc√©e...');
      
      // Forcer la mise √† jour de l'√©tat local imm√©diatement
      setUser(null);
      setProfile(null);
      setSession(null);
      setLoading(false);
      
      // D√©connexion simple
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      // Rediriger vers la page d'accueil
      window.location.href = '/';
      
      console.log('‚úÖ D√©connexion forc√©e r√©ussie');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion forc√©e:', error);
      return { error };
    }
  };

  return {
    user,
    profile,
    session,
    loading,
    signUp,
    signIn,
    signOut,
    forceSignOut,
    updateProfile,
    isAuthenticated: !!user,
  };
};
